---
motorIds:
  LEFT_DRIVE_MOTOR_FRONT_ID: 3
  LEFT_DRIVE_MOTOR_MIDDLE_ID: 2
  LEFT_DRIVE_MOTOR_REAR_ID: 1
  RIGHT_DRIVE_MOTOR_FRONT_ID: 6
  RIGHT_DRIVE_MOTOR_MIDDLE_ID: 5
  RIGHT_DRIVE_MOTOR_REAR_ID: 4
  
  INTAKE_MOTOR_ID: 10
  ARM_MOTOR1_ID: 9
  ARM_MOTOR2_ID: 12

  CLIMB_MOTOR_1_ID: 8
  CLIMB_MOTOR_2_ID: 11

vars:
  ARM_MAX_SPEED_TICKS_PER_100MS: 300

motors:
  slots: 
    motionMagicSlot: 0
    velocitySlot: 1
    primaryPIDLoop: 0
    cascadedPIDLoop: 1
  drive:
    left: 
      - &leftFront # This is the base motor, the other right side motors will inherit config from here
        id: "{{ motorIds.LEFT_DRIVE_MOTOR_FRONT_ID }}"
        name: "Left Front"
        inverted: false
        sensorPhase: true
        openLoopRampSeconds: 0.750 # Second from neutral to full (easy on the gears)
        closedLoopRampSeconds: .5
        neutralDeadband: 0.04
        neutralMode: Brake
        fullThrottleAverageSpeedNativeTicks: 8976 # per 100 ms, average of 10 samples
        cruiseSpeedNativeTicks: "{{ (motors.drive.left[0].fullThrottleAverageSpeedNativeTicks * .75) | int }}"
        motionCruise: "{{ (motors.drive.left[0].fullThrottleAverageSpeedNativeTicks * .75) | int }}"
        motionAcceleration: "{{ (4346 * .75) | int }}"

        # regular old motion magic constants
        # // public static double MOTION_MAGIC_KF 	 = 0;//0.05115; 
        # // public static double MOTION_MAGIC_KP 	 = 0;//0.005683*2*2*2*2*2*2*1.5; // = 0.545568
        # // public static double MOTION_MAGIC_KI 	 = 0;//0.001;
        # // public static double MOTION_MAGIC_KD 	 = 0;//10 * MOTION_MAGIC_KP;	// Start with 10 x Kp for increased damping of overshoot
        # // public static int    MOTION_MAGIC_IZONE  = 0;//200; 

        motionPID:
          kF: 0
          kP: 0
          kI: 0
          kD: 0
          iZone: 0
        
        # velocity PID elements
        velocityPID:
          kF: 0.113039
          kP: "{{ 0.5115/2/1.5 }}"
          kI: .0001
          kD: "{{ 10.0*0.5115 }}"
          iZone: 200

        encoder:
          enabled: true
          pidLoop: "{{ motors.slots.primaryPIDLoop }}"
          type: QuadEncoder
          startingPosition: 0
          statusFramePeriod: 160

      - <<: *leftFront # take all values from leftFront except what we override
        id: "{{ motorIds.LEFT_DRIVE_MOTOR_MIDDLE_ID }}"
        name: "Left Middle"

      - <<: *leftFront # take all values from leftFront except what we override
        id: "{{ motorIds.LEFT_DRIVE_MOTOR_REAR_ID }}"
        name: "Left Rear"

    right: 
      - &rightFront # This is the base motor, the other right side motors will inherit config from here
        id: "{{ motorIds.RIGHT_DRIVE_MOTOR_FRONT_ID }}"
        name: "Right Front"
        inverted: true
        sensorPhase: true
        openLoopRampSeconds: 0.250
        closedLoopRampSeconds: 0
        neutralDeadband: 0.04
        neutralMode: Brake
        fullThrottleAverageSpeedNativeTicks: 8976.8
        cruiseSpeedNativeTicks: "{{ (motors.drive.left[0].fullThrottleAverageSpeedNativeTicks * .75) | int }}"
        motionCruise: "{{ (motors.drive.left[0].fullThrottleAverageSpeedNativeTicks * .75) | int }}"
        motionAcceleration: "{{ (4346 * .75) | int }}"

        # regular old motion magic constants
        motionPID:
          kF: 0
          kP: 0
          kI: 0
          kD: 0
          iZone: 0
        
        # velocity PID elements
        velocityPID:
          kF: 0.114944
          kP: "{{ 0.683333/2/2 }}"
          kI: .0001
          kD: "{{ 10*0.683333/2/1.5 }}"
          iZone: 200      
        
        encoder:
          enabled: true
          pidLoop: "{{ motors.slots.primaryPIDLoop }}"
          type: QuadEncoder
          startingPosition: 0
          statusFramePeriod: 160

      - <<: *rightFront # take all values from rightFront except what we override
        id: "{{ motorIds.RIGHT_DRIVE_MOTOR_MIDDLE_ID }}"
        name: "Right Middle"

      - <<: *rightFront # take all values from rightFront except what we override
        id: "{{ motorIds.RIGHT_DRIVE_MOTOR_REAR_ID }}"
        name: "Right Rear"
  
  scoring:
    arm1:
      # Acceleration is the slope of the velocity profile used for motion magic
      # Example: 250 tick/100ms/s is 2500 ticks/s/s
      &scoringArm
      id: "{{ motorIds.ARM_MOTOR1_ID }}"
      name: "Arm1"
      inverted: false
      sensorPhase: false
      neutralMode: Brake
      motionPID:
        kF: 3.41
        kP: "{{ 0.146143*2*2*2  *2*1.5 }}"
        kI: .0001
        kD: "{{ 8.0*10.0*0.146143*2*2*2 *2*2*1.5 }}"
        iZone: 120
      motionCruise: "{{ (.50 * vars.ARM_MAX_SPEED_TICKS_PER_100MS) | int}}"
      motionAcceleration: "{{ (vars.ARM_MAX_SPEED_TICKS_PER_100MS) | int }}"
      encoder:
        enabled: true
        pidLoop: "{{ motors.slots.primaryPIDLoop }}"
        type: CTRE_MagEncoder_Relative
        startingPosition: 0
        statusFramePeriod: 1
      forwardLimitSwitch: 
        enabled: true
        normalOpenOrClose: NormallyOpen

      reverseLimitSwitch: 
        enabled: true
        normalOpenOrClose: NormallyOpen
    arm2: 
      # arm2 is a simple follower motor, no need to inherit config
      id: "{{ motorIds.ARM_MOTOR2_ID }}"
      name: "Arm2"
      inverted: false
    intake: 
      id: "{{ motorIds.INTAKE_MOTOR_ID }}"
      name: "Intake"
      inverted: false

  climb:
    climb1: 
      id: "{{ motorIds.CLIMB_MOTOR_1_ID }}"
      name: "Climb1"
      inverted: true
      neutralMode: Brake
      forwardLimitSwitch: 
        enabled: true
        normalOpenOrClose: NormallyOpen

      reverseLimitSwitch: 
        enabled: true
        normalOpenOrClose: NormallyOpen
    climb2: 
      id: "{{ motorIds.CLIMB_MOTOR_2_ID }}"
      name: "Climb2"
      inverted: false
      neutralMode: Brake

